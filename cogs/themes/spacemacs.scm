(require-builtin helix/core/themes)
(require-builtin helix/components)

(require (prefix-in theme. "../themes.scm"))

(provide built-theme
         scale-up
         scale-down
         scale-color)

; (define (ui.background theme style)
;   (theme-set-style! theme 'ui.background style))

; (theme-func attribute)

;; Just manually define them for the doc comments?
;; Or attach the doc comments separately?
; (define (attribute theme style)
;   (theme-set-style! theme 'attribute style))

; (theme-func foo)

(define variant 'dark)
(define (true-color-p)
  #t)
(define eq eq?)

(define act1 "#222226")
(define act2 "#5d4d7a")
(define base "#b2b2b2")
(define base-dim "#686868")
(define bg1 "#292b2e")
(define bg2 "#212026")
(define bg3 "#100a14")
(define bg4 "#0a0814")
(define bg-alt "#42444a")
(define border "#5d4d7a")
(define cblk "#cbc1d5")
(define cblk-bg "#2f2b33")
(define cblk-ln "#827591")

(define cblk-ln-bg
  (if (eq variant 'dark)
      (if (true-color-p) "#373040" "#333333")
      (if (true-color-p) "#ddd8eb" "#dfdfff")))

; (define cblk-ln-bg "#373040")
; (if (eq variant 'dark)
;     (if (true-color-p) "#373040" "#333333")
;     (if (true-color-p) "#ddd8eb" "#dfdfff")))

(define cursor "#e3dedd")
; (if (eq variant 'dark)
;     (if (true-color-p) "#e3dedd" "#d0d0d0")
;     (if (true-color-p) "#100a14" "#121212")))
(define const "#a45bad")
; (if (eq variant 'dark)
;     (if (true-color-p) "#a45bad" "#d75fd7")
;     (if (true-color-p) "#4e3163" "#8700af")))
(define comment "#2aa1ae")
; (if (eq variant 'dark)
;     (if (true-color-p) "#2aa1ae" "#008787")
;     (if (true-color-p) "#2aa1ae" "#008787")))
(define comment-light "#2aa1ae")
; (if (eq variant 'dark)
;     (if (true-color-p) "#2aa1ae" "#008787")
;     (if (true-color-p) "#a49da5" "#008787")))
(define comment-bg "#292e34")
; (if (eq variant 'dark)
;     (if (true-color-p) "#292e34" "#262626")
;     (if (true-color-p) "#ecf3ec" "#ffffff")))
(define comp "#c56ec3")
; (if (eq variant 'dark)
;     (if (true-color-p) "#c56ec3" "#d75fd7")
;     (if (true-color-p) "#6c4173" "#8700af")))
(define err "#e0211d")
; (if (eq variant 'dark)
;     (if (true-color-p) "#e0211d" "#e0211d")
;     (if (true-color-p) "#e0211d" "#e0211d")))
(define func "#bc6ec5")
; (if (eq variant 'dark)
;     (if (true-color-p) "#bc6ec5" "#d75fd7")
;     (if (true-color-p) "#6c3163" "#8700af")))
(define head1 "#4f97d7")
; (if (eq variant 'dark)
;     (if (true-color-p) "#4f97d7" "#268bd2")
;     (if (true-color-p) "#3a81c3" "#268bd2")))
(define head1-bg "#293239")
; (if (eq variant 'dark)
;     (if (true-color-p) "#293239" "#262626")
;     (if (true-color-p) "#edf1ed" "#ffffff")))
(define head2 "#2d9574")
; (if (eq variant 'dark)
;     (if (true-color-p) "#2d9574" "#2aa198")
;     (if (true-color-p) "#2d9574" "#2aa198")))
(define head2-bg "#293235")
; (if (eq variant 'dark)
;     (if (true-color-p) "#293235" "#262626")
;     (if (true-color-p) "#edf2e9" "#ffffff")))
(define head3 "#67b11d")
; (if (eq variant 'dark)
;     (if (true-color-p) "#67b11d" "#67b11d")
;     (if (true-color-p) "#67b11d" "#5faf00")))
(define head3-bg "#293235")
; (if (eq variant 'dark)
;     (if (true-color-p) "#293235" "#262626")
;     (if (true-color-p) "#edf2e9" "#ffffff")))
(define head4 "#b1951d")
; (if (eq variant 'dark)
;     (if (true-color-p) "#b1951d" "#875f00")
;     (if (true-color-p) "#b1951d" "#875f00")))
(define head4-bg "#32322c")
; (if (eq variant 'dark)
;     (if (true-color-p) "#32322c" "#262626")
;     (if (true-color-p) "#f6f1e1" "#ffffff")))
(define highlight "#444155")
; (if (eq variant 'dark)
;     (if (true-color-p) "#444155" "#444444")
;     (if (true-color-p) "#d3d3e7" "#d7d7ff")))
(define highlight-dim "#3b314d")
; (if (eq variant 'dark)
;     (if (true-color-p) "#3b314d" "#444444")
;     (if (true-color-p) "#e7e7fc" "#d7d7ff")))
(define keyword "#4f97d7")
; (if (eq variant 'dark)
;     (if (true-color-p) "#4f97d7" "#268bd2")
;     (if (true-color-p) "#3a81c3" "#268bd2")))
(define lnum "#44505c")
; (if (eq variant 'dark)
;     (if (true-color-p) "#44505c" "#444444")
;     (if (true-color-p) "#a8a8bf" "#af87af")))
(define mat "#86dc2f")
; (if (eq variant 'dark)
;     (if (true-color-p) "#86dc2f" "#86dc2f")
;     (if (true-color-p) "#ba2f59" "#af005f")))
(define meta "#9f8766")
; (if (eq variant 'dark)
;     (if (true-color-p) "#9f8766" "#af875f")
;     (if (true-color-p) "#da8b55" "#df5f5f")))
(define str "#2d9574")
; (if (eq variant 'dark)
;     (if (true-color-p) "#2d9574" "#2aa198")
;     (if (true-color-p) "#2d9574" "#2aa198")))
(define suc "#86dc2f")
; (if (eq variant 'dark)
;     (if (true-color-p) "#86dc2f" "#86dc2f")
;     (if (true-color-p) "#42ae2c" "#00af00")))
(define ttip "#9a9aba")
; (if (eq variant 'dark)
;     (if (true-color-p) "#9a9aba" "#888888")
;     (if (true-color-p) "#8c799f" "#5f5f87")))
(define ttip-sl "#5e5079")
; (if (eq variant 'dark)
;     (if (true-color-p) "#5e5079" "#333333")
;     (if (true-color-p) "#c8c6dd" "#afafff")))
(define ttip-bg "#34323e")
; (if (eq variant 'dark)
;     (if (true-color-p) "#34323e" "#444444")
;     (if (true-color-p) "#e2e0ea" "#dfdfff")))
(define type "#ce537a")
; (if (eq variant 'dark)
;     (if (true-color-p) "#ce537a" "#df005f")
;     (if (true-color-p) "#ba2f59" "#af005f")))
(define var "#7590db")
; (if (eq variant 'dark)
;     (if (true-color-p) "#7590db" "#8787d7")
;     (if (true-color-p) "#715ab1" "#af5fd7")))
(define war "#dc752f")
; (if (eq variant 'dark)
;     (if (true-color-p) "#dc752f" "#dc752f")
;     (if (true-color-p) "#dc752f" "#dc752f")))

;; colors
(define aqua "#2d9574")
; (if (eq variant 'dark)
;     (if (true-color-p) "#2d9574" "#2aa198")
;     (if (true-color-p) "#2d9574" "#2aa198")))
(define aqua-bg "#293235")
; (if (eq variant 'dark)
;     (if (true-color-p) "#293235" "#262626")
;     (if (true-color-p) "#edf2e9" "#ffffff")))
(define green "#67b11d")
; (if (eq variant 'dark)
;     (if (true-color-p) "#67b11d" "#67b11d")
;     (if (true-color-p) "#67b11d" "#5faf00")))
(define green-bg "#293235")
; (if (eq variant 'dark)
;     (if (true-color-p) "#293235" "#262626")
;     (if (true-color-p) "#edf2e9" "#ffffff")))
(define green-bg-s "#29422d")
; (if (eq variant 'dark)
;     (if (true-color-p) "#29422d" "#262626")
;     (if (true-color-p) "#dae6d0" "#ffffff")))
(define cyan "#28def0")
; (if (eq variant 'dark)
;     (if (true-color-p) "#28def0" "#00ffff")
;     (if (true-color-p) "#21b8c7" "#008080")))
(define red "#f2241f")
; (if (eq variant 'dark)
;     (if (true-color-p) "#f2241f" "#d70000")
;     (if (true-color-p) "#f2241f" "#d70008")))
(define red-bg "#3c2a2c")
; (if (eq variant 'dark)
;     (if (true-color-p) "#3c2a2c" "#262626")
;     (if (true-color-p) "#faede4" "#ffffff")))
(define red-bg-s "#512e31")
; (if (eq variant 'dark)
;     (if (true-color-p) "#512e31" "#262626")
;     (if (true-color-p) "#eed9d2" "#ffffff")))
(define blue "#4f97d7")
; (if (eq variant 'dark)
;     (if (true-color-p) "#4f97d7" "#268bd2")
;     (if (true-color-p) "#3a81c3" "#268bd2")))
(define blue-bg "#293239")
; (if (eq variant 'dark)
;     (if (true-color-p) "#293239" "#262626")
;     (if (true-color-p) "#edf1ed" "#d7d7ff")))
(define blue-bg-s "#2d4252")
; (if (eq variant 'dark)
;     (if (true-color-p) "#2d4252" "#262626")
;     (if (true-color-p) "#d1dcdf" "#d7d7ff")))
(define magenta "#a31db1")
; (if (eq variant 'dark)
;     (if (true-color-p) "#a31db1" "#af00df")
;     (if (true-color-p) "#a31db1" "#800080")))
(define yellow "#b1951d")
; (if (eq variant 'dark)
;     (if (true-color-p) "#b1951d" "#875f00")
;     (if (true-color-p) "#b1951d" "#875f00")))
(define yellow-bg "#32322c")
; (if (eq variant 'dark)
;     (if (true-color-p) "#32322c" "#262626")
;     (if (true-color-p) "#f6f1e1" "#ffffff")))

(define spacemacs-hash (hash "ui.text" (hash 'fg base) "ui.selection" (hash 'bg highlight)))

(define built-theme (hashmap->theme "spacemacs" spacemacs-hash))

(define (scale-up x scale)
  (min (exact (round (* scale x))) 255))

(define (scale-down x scale)
  (max (exact (round (* scale x))) 0))

(define (scale-color color scale)
  (Color/rgb (scale-up (Color-red color) scale)
             (scale-up (Color-green color) scale)
             (scale-up (Color-blue color) scale)))

(~> built-theme
    (theme.ui.cursor (~> (style) (style-bg (string->color cursor)) style-with-reversed))
    (theme.ui.background (~> (style) (style-bg (string->color bg1)) (style-fg (string->color base))))
    (theme.constant (~> (style) (style-fg (string->color const))))
    (theme.comment (~> (style) (style-fg (string->color comment)) style-with-italics))
    (theme.function.builtin (~> (style) (style-fg (string->color keyword)) style-with-italics))
    (theme.function (~> (style) (style-fg (string->color func)) style-with-italics))
    (theme.keyword.function (~> (style) (style-fg (string->color keyword))))
    (theme.string (~> (style) (style-fg (string->color str))))
    (theme.error (~> (style) (style-fg (string->color err))))
    (theme.keyword (~> (style) (style-fg (string->color keyword)) style-with-italics style-with-bold))
    (theme.ui.cursor.match
     (~> (style) (style-fg (string->color mat)) (style-underline-style Underline/Line)))
    (theme.diagnostic.error
     (~> (style) (style-underline-style Underline/Curl) (style-underline-color (string->color err))))
    (theme.diagnostic.info
     (~> (style) (style-underline-style Underline/Curl) (style-underline-color (string->color war))))
    ; (theme.variable.parameter (~> (style) (style-fg (string->color ))))
    (theme.type (~> (style) (style-fg (string->color type))))
    (theme.type.builtin (~> (style) (style-fg (string->color type))))
    (theme.variable (~> (style) (style-fg (string->color var))))
    (theme.namespace (~> (style) (style-fg (string->color type))))
    (theme.ui.cursor.primary (~> (style) style-with-reversed))
    (theme.ui.cursorline (~> (style) (style-bg (string->color highlight-dim)))))

; (show-paren-match ((,class (:foreground ,mat :inherit bold  :underline ,(when spacemacs-theme-underline-parens t)))))

;; Sets the built theme
; (theme-set-style! built-theme 'string (~> (style) (style-fg (string->color str))))

; (theme-style built-theme "string")

;; Build a style up directly?
; (theme-set-style! built-theme 'comment (~> (style) (style-fg my-color) (style-with-rapid-blink)))
; (theme-set-style! built-theme 'constant (~> (style) (style-fg my-color) (style-with-rapid-blink)))

; (theme.comment built-theme
;                (~> (style)
;                    (style-fg (string->color "#ff4720"))
;                    style-with-slow-blink
;                    style-with-bold
;                    style-with-italics))

; (list 10 20 30)

(add-theme! *helix.cx* built-theme)

; (provide built-theme
;          scale-up
;          scale-down
;          scale-color)

; (helix.theme "spacemacs")
; (helix.theme "spacemacs")

; (provide built-theme
;          scale-up
;          scale-down
;          scale-color)
